<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<!-- Sanwaf - Sanitation Web Application Filter, Configuration file -->

<!-- 
	OVERVIEW
	********
	Sanwaf - Sanitation Web Application Filter is a filter/interceptor added to application for increased protection.

	Web Severs receive requests with Headers, Cookies, Parameters being sent from an untrusted client to your server.  
	A hacker can try to use these submissions in an attack by attaching payloads to try to hack your server.
	Sanwaf detects attack payloads and will prevent submitted data from impacting your system.
	
	Sanwaf works on the basis of sanitizing, or pre-validating data prior to application code execution.

	IMPLEMENTATION
	*************
		Create an Filter or Interceptor to and call the Sanwaf.isThreatDetected() method to validate incoming requests.
		For examples:
	
			public class SanwafFilter implements Filter {
				static Sanwaf sanwaf = new Sanwaf();
			
				public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {
					if (sanwaf.isThreatDetected( request )) {
						// Up to you how you want to handle detected threats.  Typical patterns include:
						// 		1. Throw Exception that will be caught by some global exception handler to display a proper error page
						// 		2. Log the user out and redirect the user to a login page
					}
					filterChain.doFilter(request, response);
				}
			}
	

	ESCAPING STRINGS:
	*****************
	When using data that needs to be XML escaped, use the CDATA notation;
				<![CDATA[__your_text_here__]]> 
	
	Please note the following limitations:
			a. "<![CDATA[" must be first entry in the element with no spaces or other characters prior to it
			b. "]]>" must be the last entry in the element

		Example:
			- GOOD: <element><![CDATA[__your_text_here__]]></element>

			- BAD:  <element>      <![CDATA[__your_text_here__]]></element>


	CUSTOM DATATYPES:
	*****************
	In order to improve the performance of scanning submitted data as fast as possible, custom data types were built and are designed to fail fast. 
	Use these data types whenever possible (instead of simply assigning all to the string data type that uses regex's).
  
	SUMMARY: (see below for guide)
	********
		c		- Character
		n 		- Number
		n{} 	- Delimited list of Numbers
		a		- Alphanumeric
		a{}		- Alphanumeric and stated additional characters
		s		- String (uses regex's - most expensive - try to use sparingly)
		k{}		- Must be equal to the of if the Constant values provided
		r{}		- Custom regex expression (reusable per field regex capabilities)
		j{}		- Java Class.method - returns true/false for pass/fail

	(min,max)	- Specify max & min length limits for the submitted data; specify -1 to use max range supported (Integer.MAX_VALUE)
				- Suffix a data type with : (min,max)
					For Example: 
									n(7,7)			- 7 digit number
									a(0,10)			- 0-10 characters of alphanumeric text
									r{ssn}(0,10)	- 0-10 characters that also match a regex called ssn

	CONFIGURATION:
	**************
	You configure how submitted data (parameters/headers/cookies) get processed in the shields/shield/metadata/secured section of this XML file.
	The secured section contains the following groups: parameters, headers, cookies. 
						
	GROUP FORMAT:
	*************
	Groups (parameters|headers|cookies) contain a list of items to be protected by the WAF.
	Each item can contain single or multiple entries separated by three colons (":::") 
	For example:
				  Single:	
							<item>key1=value</item>
							<item>key2=value</item>
			      Multiple:
							<item>key1-value:::key2=value</item>
		
	NOTATION:
	*********
				<parameters|headers|cookies>
					<item>key=[c|n|n{}|a|a{}|k{}|r{}|j{}][:::[...]...]</item>
					...
				</parameters|headers|cookies>
		
	EXAMPLE:
	********
				<parameters>
					<item>foo=s(10,15)</item>
					<item>bar=n{,}(5,5)</item>
					<item>barfoo=s(10,15):::foobar=n{,}(5,5)</item>
				</parameters>


	***************************************************************************************************
	* CUSTOM DATATYPE GUIDE                                                                 * 
	***************************************************************************************************
	
	(Character)
		c		DESCRIPTION:	Any single character
					FORMAT: 	key=c
					EXAMPLE: 	parameterName=c
								VALID: 			X
	
	(Number) 		
		n		DESCRIPTION:	Any positive or negative numeric value ( '+' sign NOT allowed; one '-' sign allowed @start of value; no spaces; one '.' allowed)  
				FORMAT:			key=n  
				EXAMPLE:		parameterName=n
								VALID: 			-321.123		INVALID: +12
												   0.000			      12.34.56
								
	(Delimited list of Numbers)
		n{}	    DESCRIPTION:	A character separated list of numbers
				FORMAT:			key=n{<separator char>}  
				EXAMPLE:		parameterName=n{,}
								VALID: 			-321.123,0.000,123,45
												  
	(Alphanumeric)
		a		DESCRIPTION:	Valid chars are A-Z, a-z, 0-9. 
				FORMAT: 		key=a
				EXAMPLE: 		parameterName=a
								VALID:			abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ 
	
	(Alphanumeric and stated additional characters)						
		a{}		DESCRIPTION:	Valid chars are A-Z, a-z, 0-9 *AND* the characters you specify in the curly brackets (no delimiter)		
				FORMAT: 		key=a{<characters to allow>}1
								 For <space>, <tab>, <newline>, <carriage return> use: \s \t \n \r respectively
				EXAMPLE:		parameterName=a{+\s,}
								VALID: 			abcdefghijklm nopqrstuvwxyz+,
	
	(String) 
		s 		DESCRIPTION:	Any string.  All regexs in the autoRegex are executed against the string - most expensive)
				FORMAT: 		key=s
				EXAMPLE:		parameterName=s
								VALID: 			"Hello this string does not contain a XSS payload"

	(Constant)
		k{}		DESCRIPTION: 	Constant, must be equal to one of the values specified
					FORMAT: 	key=k{<comma separated list of strings>}
					EXAMPLE: 	unitTestString=k{FOO,BAR,FAR}
								VALID: 			FOO, BAR, FAR	

	(Custom Regex)
		r{}		DESCRIPTION: 	Custom Regex Expression in this file (for reuse)
					FORMAT: 	key=r{CustomRegexName}
					EXAMPLE: 	unitTestString=R{date}
								VALID: 			**depends on regex specified**	
	
	(Java)
		j{}		DESCRIPTION: 	Java, call java class for processing.
								The key value and the ServletRequest object is passed to the method.  
								The method must be in the fomat:
									public static boolean methodName(String s, ServletRequest request)
										return true for threat found, else false;
					FORMAT: 	key=j{fully qualified className.methodName()}
					EXAMPLE: 	unitTestJava=j{com.foo.bar.SomeClass.someMethod()}
								VALID: 			**depends on class processing**
	
 -->




<sanwaf>
	<global-settings>
		<!-- Master Enabled Flag; must be true for Sanwaf to detect issues -->
		<enabled>true</enabled>

		<!-- log startup and errors in verbose mode -->
		<verbose>true</verbose>
		
		<!-- Application Release Version that is being protected, for logging purposes only -->
		<app.version>=${Your_Application_Release_Version}</app.version>	
	
		<!-- Error Handling: What to store in the request as attributes to be consumed by your application. -->
		<errorHandling>
			<provideTrackId>true</provideTrackId>
			<provideErrors>true</provideErrors>
		</errorHandling>
	
		<!-- Default Error Messages for data type violations.  Can be over ridden by shield entries.
			 You can set these values to anything you want including HTML characters.  
			 Note the "{0}" markers for the alphanumericAndMore & numericDelimited properties.
			 Used to splash the characters in the error message generated by Sanwaf; if not present, 
			 additional characters not be included in the error message.
		-->
		<errorMessages>
			<char><![CDATA[ <b>Only a single character is permitted.</b>&nbsp;<i>For example: <b>a</b></i>]]></char>
			<numeric><![CDATA[ <b>Only numeric values are permitted.</b>&nbsp;<i>For example: <b>-123.456</b></i>]]></numeric>
			<numericDelimited><![CDATA[ <b>Only numeric values and numeric values separated by &quot;{0}&quot; are permitted.</b>&nbsp;<i>For example: <b>123,-123,123.456</b></i>]]></numericDelimited>
			<alphanumeric><![CDATA[ <b>Only alphanumeric characters are permitted.</b>&nbsp;<i>For example: <b>abc123</b></i>]]></alphanumeric>
			<alphanumericAndMore><![CDATA[ <b>Only alphanumeric characters and special characters: <i>{0}</i> are permitted.</b>&nbsp;<i>For example: <b>abc123{0}</b></i>]]></alphanumericAndMore>
			<constant><![CDATA[ <b>Invalid value provided,</b>&nbsp;<i>value must be one of: <b>{0}</b></i>]]></constant>
			<string><![CDATA[ <b>Invalid text provided.</b>&nbsp;<i>Recommended Correction: Add a space before any special characters, such as: <b>&nbsp;&lt;&nbsp;&gt;&nbsp;:</b></i>]]></string>
			<regex><![CDATA[ Invalid value provided, please try again.]]></regex>
			<java><![CDATA[ Invalid value provided.]]></java>
		</errorMessages>
	</global-settings>
	
	<!-- List of shields configured to protect your system. You can use single or multiple shields to logically organize your system -->
	<shields>
		<shield>
			<name>XSS</name>
			
			<!-- Minimum length of parameter to trigger this shield -->
			<minLen>4</minLen>
			
			<!-- Maximum length of parameter to trigger this shield; Enter -1 to use max supported range or Integer.MAX_VALUE -->
			<maxLen>-1</maxLen>
	
			<!-- Localized error messages for this shield - overrides default ones -->
			<!--errorMessages>
				<char></char>
				<numeric></numeric>
				<numericDelimited></numericDelimited>
				<alphanumeric></alphanumeric>
				<alphanumericAndMore></alphanumericAndMore>
				<constant></constant>
				<string></string>
				<regex></regex>
				<java></java>
			</errorMessages-->
	
			<!-- Regex configuration Section -->
			<regex>
				<!-- Minimum length of parameter to trigger the regex processing -->
				<minLen>4</minLen>
				
				<!-- Control whether to treat all non-mapped/managed parameters as strings (regex) -->
				<alwaysPerformRegex>
					<enabled>false</enabled>
					
					<!-- List of parameters to be ignored for the regex processing if enabled -->
					<!--exclusions>
						<item></item>
					</exclusions-->
				</alwaysPerformRegex>
				
				<!-- Auto Run Patterns is a list of patterns that will automatically be run against every parameter marked as a string datatype (s) 
						<key>  - the name of the pattern
						<item> - the pattern in a regular string format (no escaping quotes, backslashes...)
									 NOTE: 	Do NOT wrap regex in "/.../i" format.
											All regex's are compiled with ignore case enabled 
				-->
				<autoRunPatterns>
					<item>
						<key>javascriptExpression</key>
						<value><![CDATA[(?:(?:(?:^)|(?:=|"|'|(?:%(?:2[27]|3D))))|(?:\s|%20)+)(?:(?:j|%[46]a)(?:(?:&|%26)(?:.)*?(?:;|%3b))*?(?:a|%[46]1)(?:(?:&|%26)(?:.)*?(?:;|%3b))*?(?:v|%[57]6)(?:(?:&|%26)(?:.)*?(?:;|%3b))*?(?:a|%[46]1)(?:(?:&|%26)(?:.)*?(?:;|%3b))*?(?:s|%[57]3)(?:(?:&|%26)(?:.)*?(?:;|%3b))*?(?:c|%[46]3)(?:(?:&|%26)(?:.)*?(?:;|%3b))*?(?:r|%[57]2)(?:(?:&|%26)(?:.)*?(?:;|%3b))*?(?:i|%[46]9)(?:(?:&|%26)(?:.)*?(?:;|%3b))*?(?:p|%[57]0)(?:(?:&|%26)(?:.)*?(?:;|%3b))*?(?:t|%[57]4)(?:(?:&|%26)(?:.)*?(?:;|%3b))*?(?:\:|%3a)|(?:v|%[57]6)(?:b|%[46]2)(?:s|%[57]3)(?:c|%[46]3)(?:r|%[57]2)(?:i|%[46]9)(?:p|%[57]0)(?:t|%[57]4)|(?:e|%[64]5)(?:(?:\/|%2f)(?:\*|%2a).*?(?:\*|%2a)(?:\/|%2f))*?(?:x|%[75]8)(?:(?:\/|%2f)(?:\*|%2a).*?(?:\*|%2a)(?:\/|%2f))*?(?:p|%[75]0)(?:(?:\/|%2f)(?:\*|%2a).*?(?:\*|%2a)(?:\/|%2f))*?(?:r|%[75]2)(?:(?:\/|%2f)(?:\*|%2a).*?(?:\*|%2a)(?:\/|%2f))*?(?:e|%[64]5)(?:(?:\/|%2f)(?:\*|%2a).*?(?:\*|%2a)(?:\/|%2f))*?(?:s|%[75]3)(?:(?:\/|%2f)(?:\*|%2a).*?(?:\*|%2a)(?:\/|%2f))*?(?:s|%[75]3)(?:(?:\/|%2f)(?:\*|%2a).*?(?:\*|%2a)(?:\/|%2f))*?(?:i|%[64]9)(?:(?:\/|%2f)(?:\*|%2a).*?(?:\*|%2a)(?:\/|%2f))*?(?:o|%[64]f)(?:(?:\/|%2f)(?:\*|%2a).*?(?:\*|%2a)(?:\/|%2f))*?(?:n|%[64]e)(?:\(|%28))]]></value>
					</item>
					<item>
						<key>xss</key>
						<value><![CDATA[(?:<|%3c)(?:|(?:\/|%2f)|[^/>][^>]+|(?:\/|%2f)[^>][^>]+)(?:>|%3e)]]></value>
					</item>
				</autoRunPatterns>
				
				<!-- Custom Patterns are a list of named patterns to be applied against one or more parameters/headers/cookies
						Note that a pass/true is returned for matches; otherwise a fail/false is returned
				 
					<key> - the name of the pattern 
					<item> - the pattern in a regular string format (no escaping quotes, backslashes...)
									 NOTE: 	Do NOT wrap regex in "/.../i" format.
											All regex's are compiled with ignore case enabled 
				-->
				<customPatterns>
					<item>
						<key>date</key>
						<value><![CDATA[^\d{4}\-(?:0?[1-9]|1[012])\-(?:0?[1-9]|[12][0-9]|3[01])$]]></value>
					</item>
					<item>
						<key>telephone</key>
						<value><![CDATA[(?:[0-9]{3})(?:[ .-]{1})(?:[0-9]{3})(?:[ .-]{1})(?:[0-9]{4})]]></value>
					</item>
				</customPatterns>
			</regex>
	
			<metadata>
				<!-- Indicate what request portions are protected -->
				<enabled>
					<parameters>true</parameters>
					<headers>true</headers>
					<cookies>true</cookies>
				</enabled>
				
				<!-- Specify if the request portion is to be treated with case sensitivity -->
				<caseSensitive>
					<parameters>true</parameters>
					<headers>true</headers>
					<cookies>true</cookies>
				</caseSensitive>
				
				<!-- See CUSTOM DATATYPE GUIDE above for details of this section -->
				<secured>
					<!-- parameters listed below are only used by the sample application -->
					<parameters>
						<item>char=c</item>
						<item>numeric=n</item>
						<item>numericdelimited=n{,}</item>
						<item>alphanumeric=a</item>
						<item>alphanumericandmore=a{'}</item>
						<item>string=s</item>
						<item>regex=r{date}</item>
						<!--item>java=j{com.sanwaf.core.JavaClass.over10trueElseFalse()}</item-->
					</parameters>
					<headers>
					</headers>
					<cookies>
					</cookies>
				</secured>
			</metadata>
		</shield>
	</shields>
</sanwaf>

